/**
 * $ ./gradlew
 * The default task will build the project and run the test suite inside
 * your local spark environment (spark-submit must be on the PATH).
 *
 * To build and install library, run ./gradlew jar install
 *
 * To generate documentation and docs JAR, run ./gradlew docsJar
 *
 * A coverage report will be present at build/reports/scoverage/index.html
 *
 * TODO integrate https://github.com/kt3k/coveralls-gradle-plugin
 */

buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath 'com.github.maiflai:gradle-scalatest:0.9'
    classpath 'org.scoverage:gradle-scoverage:1.0.9'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
    classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.7.2'
  }
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.maiflai.scalatest'
apply plugin: 'scoverage'
apply plugin: 'idea'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'scalaStyle'

sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
  mavenLocal()
  mavenCentral()
}

configurations {
  provided
}

group = 'software.uncharted.sparkpipe'
version = '0.1.0'

project.ext {
  scalaBinaryVersion = '2.10'
  scalaVersion = '2.10.4'
  sparkVersion = '1.4.0'
  scoverageVersion = '1.1.1'
  artifactName = 'sparkpipe-core'
  inceptionYear = '2015'
}

jar {
  baseName = "${artifactName}"
  version =  version
  dependsOn configurations.runtime
  from {
    (configurations.runtime - configurations.provided).collect {
      it.isDirectory() ? it : zipTree(it)
    }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
}

task docs(type: ScalaDoc) {
  source = sourceSets.main.allScala
}

task docsJar(type: Jar, dependsOn: docs) {
  classifier = 'scaladoc'
  from docs.destinationDir
}

checkScoverage {
  minimumRate = 1
}

task testJar(type: Jar) {
  classifier = 'tests'
  from sourceSets.test.output
}

task test(overwrite: true, type: Exec, dependsOn: [jar, jarScoverage, testJar, docsJar, scalaStyle]) {
  executable = 'spark-submit'
  args = ["--packages","org.mockito:mockito-all:1.10.19,org.scalatest:scalatest_${scalaBinaryVersion}:2.2.5,org.scoverage:scalac-scoverage-runtime_${scalaBinaryVersion}:${scoverageVersion}","--jars","/opt/pipeline/build/libs/${artifactName}-${version}-scoverage.jar","--class","software.uncharted.sparkpipe.Main","build/libs/${artifactName}-${version}-tests.jar"]
}

task coverage(overwrite: true, dependsOn: test) << {
  reportScoverage.execute()
  checkScoverage.execute()
}

coveralls {
  coberturaReportPath = "${buildDir}/reports/scoverage/cobertura.xml"
}

//////////////////////////////////////
//BEGIN nexus oss
//////////////////////////////////////
task createPom << {
  pom {
    project {
      groupId = group
      version = version
      artifactId = artifactName

      inceptionYear = inceptionYear
      licenses {
        license {
          name = 'The Apache Software License, Version 2.0'
          url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          distribution = 'repo'
        }
      }
      developers {
        developer {
          id = 'smcintyre'
          name = 'Sean McIntyre'
          email = 'smcintyre@uncharted.software'
        }
      }
    }
  }.writeTo("${buildDir}/libs/${artifactName}-${version}.pom")
}

signing {
  sign configurations.archives
  sign testJar
  sign docsJar
}
//make sure install doesn't depend on signing
gradle.taskGraph.whenReady { taskGraph ->
  def tasks = taskGraph.getAllTasks()
  if (tasks.find {it.name == 'install'}) {
    tasks.findAll {it.name == 'signArchives' || it.name == 'signDocsJar' || it.name == 'signTestJar'}.each { task ->
      task.enabled = false
    }
  }
}
task signPom(dependsOn: createPom) << {
  signing.sign(file("${buildDir}/libs/${artifactName}-${version}.pom"))
}
task nexus(type: Jar, dependsOn: [signArchives, signTestJar, signDocsJar, signPom]) {
  baseName "${artifactName}-nexus-bundle"
  from "${buildDir}/libs"
  destinationDir file("${buildDir}/nexus")
}
//////////////////////////////////////
//END nexus oss
//////////////////////////////////////

scalaStyle {
  configLocation = "scalastyle_config.xml"
  includeTestSourceDirectory = true
  source = sourceSets.main.allScala
  testSource = sourceSets.test.allScala
  failOnWarning = true
}

sourceSets {
  main { compileClasspath += configurations.provided }
  test { compileClasspath += configurations.provided }
  test { runtimeClasspath += configurations.provided }
  scoverage { compileClasspath += configurations.provided }
  testScoverage { compileClasspath += configurations.provided }
}

dependencies {
    //scala
    provided("org.scala-lang:scala-library:${scalaVersion}")

    //spark
    provided "org.apache.spark:spark-core_${scalaBinaryVersion}:${sparkVersion}"
    provided "org.apache.spark:spark-sql_${scalaBinaryVersion}:${sparkVersion}"
    //provided "org.apache.spark:spark-streaming_${scalaBinaryVersion}:${sparkVersion}"
    //provided "org.apache.spark:spark-graphx_${scalaBinaryVersion}:${sparkVersion}"
    provided "org.apache.spark:spark-mllib_${scalaBinaryVersion}:${sparkVersion}"
    provided "org.scala-lang:scala-library:$scalaBinaryVersion"

    //scalatest
    testCompile "org.scalatest:scalatest_${scalaBinaryVersion}:2.2.5"
    testRuntime "org.pegdown:pegdown:1.1.0"

    //mockito
    testCompile "org.mockito:mockito-all:1.10.19"

    //scoverage
    scoverage "org.scoverage:scalac-scoverage-plugin_${scalaBinaryVersion}:${scoverageVersion}",
            "org.scoverage:scalac-scoverage-runtime_${scalaBinaryVersion}:${scoverageVersion}"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}

idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/main/")
    }
}

defaultTasks 'coverage'
